==================================================
Project: Modeling Student Balance Changes with SQL / ѕроект: ћоделирование изменени€ балансов студентов с помощью SQL.
==================================================
My task was to model the change in student balances. A balance is the number of hours each student has.
We need to make sure everything is okay with our data so I can form a list of hypotheses and questions, it was important for me to understand:
- how many total hours were in balance for all students on each calendar day;
- how that number changed as a result of as a result of transactions (payments, fees, adjustment charges) and classes (debiting the balance during class time).
The result is a query that collects student balances for each completed day.

*ћоей задачей было смоделировать изменение студенческих балансов. Ѕаланс Ц это количество часов, которые есть у каждого студента.
„тобы убедитьс€, что с нашими данными все в пор€дке, чтобы € мог сформировать список гипотез и вопросов, мне было важно пон€ть:
- сколько всего часов было на балансе у всех студентов в каждый календарный день;
- как мен€лось это число в результате транзакций (платежей, комиссий, корректировочных списаний) и зан€тий (списани€ баланса во врем€ уроков).
–езультатом €вл€етс€ запрос, который собирает балансы учащихс€ за каждый завершенный день.*

with first_payments as 
    (
    select user_id, 
          to_char(date_trunc('day', min(transaction_datetime))::date, 'yyyy.mm.dd') as first_payment_date
    from skyeng_db.payments
    where status_name = 'success'
    group by user_id
    order by first_payment_date
    ), 

all_dates as 
    (    
    select distinct to_char(date(class_start_datetime)::date, 'yyyy.mm.dd') as cs_dt
    from skyeng_db.classes
    where date_trunc('YEAR', class_start_datetime) = '2016-01-01' and class_status = 'success' 
    order by cs_dt
    ), 

all_dates_by_user as 
    (
    select user_id
         , cs_dt
    from all_dates
    join first_payments on all_dates.cs_dt >= first_payments.first_payment_date
    order by 1, 2
    ),

payments_by_dates as   
    (
    select user_id
          , to_char(date(transaction_datetime)::date, 'yyyy.mm.dd') as payment_date
          , sum (classes) as transaction_balance_change
    from skyeng_db.payments
    where status_name = 'success'
    group by user_id, payment_date
    order by user_id asc, transaction_balance_change desc
    ),

payments_by_dates_cumsum as
    (
    select all_dates_by_user.user_id
        , cs_dt
        , transaction_balance_change
         , coalesce(transaction_balance_change,0)
        , sum(coalesce(transaction_balance_change,0)) over (partition by all_dates_by_user.user_id order by cs_dt rows between unbounded preceding and current row) as transaction_balance_change_cs
    from all_dates_by_user as all_dates_by_user
    left join payments_by_dates as payments_by_dates
            on all_dates_by_user.user_id = payments_by_dates.user_id
            and all_dates_by_user.cs_dt = payments_by_dates.payment_date
    ),
    
classes_by_dates as
    (
    select user_id
        , to_char(date_trunc('day', class_start_datetime)::date, 'yyyy.mm.dd') as class_date 
        , count(id_class) * -1 as classes
    from skyeng_db.classes
    where class_type <> 'trial'
            and (class_status = 'success' or  class_status = 'failed_by_student')
    group by 1, 2
    ),
    
classes_by_dates_dates_cumsum as
    (
    select all_dates_by_user.user_id
         , cs_dt
         , classes
         , sum(coalesce(classes,0)) over (partition by all_dates_by_user.user_id order by cs_dt rows between unbounded preceding and current row) as classes_cs
    from all_dates_by_user as all_dates_by_user
        left join classes_by_dates as classes_by_dates
            on all_dates_by_user.user_id = classes_by_dates.user_id
                and all_dates_by_user.cs_dt = classes_by_dates.class_date
    ),
 
balances as
    (
    select payments_by_dates_cumsum.user_id
        , payments_by_dates_cumsum.cs_dt
        , transaction_balance_change
        , transaction_balance_change_cs
        , classes
        , classes_cs
        , classes_cs + transaction_balance_change_cs as balance
    from payments_by_dates_cumsum as payments_by_dates_cumsum
        left join classes_by_dates_dates_cumsum as classes_by_dates_dates_cumsum
            on payments_by_dates_cumsum.user_id = classes_by_dates_dates_cumsum.user_id
                and payments_by_dates_cumsum.cs_dt = classes_by_dates_dates_cumsum.cs_dt
    )

    select cs_dt
         , sum(transaction_balance_change) as sum_t_b_change
         , sum(transaction_balance_change_cs) as sum_t_b_change_cs
         , sum(classes) as sum_classes
         , sum(classes_cs) as sum_classes_cs
         , sum(balance) as sum_balance
    from balances
    group by cs_dt
    order by cs_dt


